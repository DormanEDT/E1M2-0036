RCSTM8 COMPILER V2.42.12.083,  STM8S_KLINE        05/19/25  15:34:42

QCW(0x00963FA0)

RCSTM8 COMPILER V2.42.12.083, COMPILATION OF MODULE STM8S_KLINE
OBJECT MODULE PLACED IN C:\Users\sravi\Downloads\E1M2_0036\E1M2_0036\main_app\bin\stm8s_kline.obj
COMPILER INVOKED BY: QUIET GENERATEDEPFILE CODE DB OJ(C:\Users\sravi\Downloads\E1M2_0036\E1M2_0036\main_app\bin\stm8s_kline.obj) PR(C:\Users\sravi\Downloads\E1M2_0036\E1M2_0036\main_app\lst\stm8s_kline.lst) PIN(C:\Raisonance\Ride\Inc;C:\Raisonance\Ride\Inc\ST7;C:\Raisonance\Ride\Inc\STM8;C:\Users\sravi\Downloads\E1M2_0036\E1M2_0036\main_app\inc) STM8(SMALL) O(3,SIZE) NOINITSTATICVAR SMALLOBJECT ET(INT) 

stmt level    source
   1          /* Includes ------------------------------------------------------------------*/
   2          #include "stm8s_Kline.h"
   3          #include "stm8s_uart1.h"
   4          #include "stm8s_eol.h"
   5          /* Variable Declarations **********************************************/
   6          uint8_t kline_tx_length              = RESET;
   7          uint8_t kline_receive_complete_flag  = RESET;
   8          uint8_t rx_count                     = RESET;
   9          uint8_t receive_len                  = RESET;
  10          uint8_t uart_recv_data               = RESET;
  11          uint8_t rcv_data[12]                 = {0};
  12          uint8_t kline_rx_data[12]            = {0};
  13          uint8_t kline_tx_data[12]            = {0};
  14          
  15          uint16_t kline_total_rcv_cnt         = RESET;
  16          uint32_t BaudRate                    = 10417;
  17          /* Variable Declarations **********************************************/
  18          
  19          
  20          /*******************************************************************/
  21          /*                                                                 */
  22          /*   FUNCTION NAME  :   UART_Config                                */
  23          /*                                                                 */
  24          /*   FUNCTION BRIEF :   UART Initialisation                        */
  25          /*                                                                 */
  26          /*                                                                 */
  27          /*   PARAMETERS     :   None                                       */
  28          /*                                                                 */
  29          /*   RETURN VALUES  :   None                                       */
  30          /*                                                                 */
  31          /*******************************************************************/
  32          
  33          void UART_Config(void)
  34          {
  35   1          u32 BaudRate_brr1 = RESET, BaudRate_brr2 = RESET;
  36   1          GPIOA->DDR &= ~((u8)0x10); // Configured as Input
  37   1          GPIOA->CR1 |= (u8)0x10;    // Internal pull up
  38   1          GPIOA->CR2 &= ~((u8)0x10); // Floating Input
  39   1                                     // UART1 Settings Related Register (No. of Bits. Parity, etc.
  40   1          UART1->CR1 = (u8)0x00;
  41   1          // Set Baud Rate
  42   1          UART1->BRR1 = (u8)0x00;
  43   1          UART1->BRR2 = (u8)0x00;
  44   1          /* Set the UART1 BaudRates in BRR1 and BRR2 registers according to UART1_BaudRate value */
  45   1          BaudRate_brr1 = ((u32)CPU_FREQUENCY / (BaudRate << (u8)4));
  46   1          BaudRate_brr2 = (((u32)CPU_FREQUENCY * 100) / (BaudRate << (u8)4));
  47   1          /* Set the fraction of UART1DIV  */
  48   1          UART1->BRR2 |= (u8)((u8)(((BaudRate_brr2 - (BaudRate_brr1 * 100)) << (u8)4) / 100) & (u8)0x0F);
  49   1          /* Set the MSB mantissa of UART1DIV  */
  50   1          UART1->BRR2 |= (u8)((BaudRate_brr1 >> (u8)4) & (u8)0xF0);
  51   1          /* Set the LSB mantissa of UART1DIV  */
  52   1          UART1->BRR1 |= (u8)BaudRate_brr1;
  53   1          // UART1 Interrupt Related Register
  54   1          UART1->CR2  = (u8)0x24;
  55   1          UART1->CR3  = (u8)0x00;  // LIN Related Register
  56   1          UART1->CR4  = (u8)0x00;  // LIN Relared Register
  57   1          UART1->CR5  = (u8)0x00;  // Smart Card and IrDA Related
  58   1          UART1->GTR  = (u8)0x00;  // Guard Time Register (Smartcard Related)
  59   1          UART1->PSCR = (u8)0x00; // Only useful if SmartCard & IrDA is used
  60   1      }
  61          
  62          
  63          void kline_transmit(uint8_t *lp_data, uint8_t lp_len)
  64          {
  65   1          uint8_t tr_i;
  66   1      
  67   1          UART1->CR2 = 0x08;
  68   1          for (tr_i = RESET; tr_i < lp_len; tr_i++)
  69   1          {
  70   2              UART1->DR = lp_data[tr_i];
  71   2              while (UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET)
  72   2              {
  73   3              }
  74   2          }
  75   1      
  76   1          UART1->DR = kline_checksum(lp_data, lp_len);
  77   1          while (UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET)
  78   1          {
  79   2          }
  80   1         
  81   1          while (UART1_GetFlagStatus(UART1_FLAG_TC) == RESET)
  82   1          {
  83   2          }
  84   1      
  85   1          UART1->CR2 |= 0x24;
  86   1      }
  87          
  88          
  89          
  90          /*******************************************************************/
  91          /*                                                                 */
  92          /*   FUNCTION NAME  :   uart_process_data                          */
  93          /*                                                                 */
  94          /*   FUNCTION BRIEF :   Copying received data buffer               */
  95          /*                                                                 */
  96          /*                                                                 */
  97          /*   PARAMETERS     :   Received buffer address,size of buffer     */
  98          /*                                                                 */
  99          /*   RETURN VALUES  :   None                                       */
 100          /*                                                                 */
 101          /*******************************************************************/
 102          
 103          void uart_process_data(uint8_t *BuffPointer, uint8_t rec_length)
 104          {
 105   1          uint8_t iLoop = RESET;
 106   1      
 107   1          for (iLoop = RESET; iLoop < rec_length; iLoop++)
 108   1          {
 109   2              kline_rx_data[iLoop] = BuffPointer[iLoop];
 110   2          }
 111   1      
 112   1          kline_receive_complete_flag = 1;
 113   1      }
 114          
 115          /*******************************************************************/
 116          /*                                                                 */
 117          /*   FUNCTION NAME  :   kline_checksum                             */
 118          /*                                                                 */
 119          /*   FUNCTION BRIEF :   Here 1ms tasks are done                    */
 120          /*                                                                 */
 121          /*                                                                 */
 122          /*   PARAMETERS     :   Data buffer address,size of data buffer    */
 123          /*                                                                 */
 124          /*   RETURN VALUES  :   Checksum                                   */
 125          /*                                                                 */
 126          /*******************************************************************/
 127          uint8_t kline_checksum(uint8_t *p_data, uint8_t len)
 128          {
 129   1          uint8_t tr_i;
 130   1          uint8_t checksum = RESET;
 131   1      
 132   1          for (tr_i = RESET; tr_i < len; tr_i++)
 133   1          {
 134   2              checksum += p_data[tr_i];
 135   2          }
 136   1      
 137   1          return (checksum);
 138   1      }
 139          
 140          /*******************************************************************/
 141          /*                                                                 */
 142          /*   FUNCTION NAME  :   INTERRUPT_HANDLER                          */
 143          /*                                                                 */
 144          /*   FUNCTION BRIEF :   UART1 TX Interrupt routine                 */
 145          /*                                                                 */
 146          /*                                                                 */
 147          /*   PARAMETERS     :   None                                       */
 148          /*                                                                 */
 149          /*   RETURN VALUES  :   None                                       */
 150          /*                                                                 */
 151          /*******************************************************************/
 152          
 153          INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
 154          {
 155   1          if ((UART1->SR & 0x0E) != RESET)
 156   1          {
 157   2              (void) UART1->SR;
 158   2              (void) UART1->DR;
 159   2           }
 160   1          UART1->SR = 0x00;
 161   1      }
 162          
 163          /*******************************************************************/
 164          /*                                                                 */
 165          /*   FUNCTION NAME  :   INTERRUPT_HANDLER                          */
 166          /*                                                                 */
 167          /*   FUNCTION BRIEF :   UART1 RX Interrupt routine                 */
 168          /*                                                                 */
 169          /*                                                                 */
 170          /*   PARAMETERS     :   None                                       */
 171          /*                                                                 */
 172          /*   RETURN VALUES  :   None                                       */
 173          /*                                                                 */
 174          /*******************************************************************/
 175          
 176          INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
 177          {
 178   1          if ((UART1->SR & 0x0E) == FALSE)
 179   1          {
 180   2              uart_recv_data = UART1->DR;
 181   2              if((Tester_Present==TRUE))
 182   2              {
 183   3                  kline_receive_validate_message2(uart_recv_data);
 184   3              }
 185   2      
 186   2          }
 187   1          else
 188   1          {
 189   2              (void) UART1->SR;
 190   2              //Read DR register will clear the error flags
 191   2              (void) UART1->DR;   
 192   2             
 193   2          }
 194   1      
 195   1          UART1->SR = 0x00;
 196   1      }
 197          
 198          /*****************************************************************************
 199           *
 200           *	End of file Kline.c
 201           *
 202           *****************************************************************************/
RCSTM8 COMPILER V2.42.12.083
ASSEMBLY LISTING OF GENERATED OBJECT CODE

              ; FUNCTION ?UART_Config (BEGIN)
              ; SOURCE LINE # 33 
0000 5208                              SUB    SP,#008H
              ; BX_CX is assigned to BaudRate_brr1
              ; SOURCE LINE # 35 
0002 CD0000     F                      CALL   ?C?mv4_null2bc
              ; BX_CX is assigned to BaudRate_brr2
0005 CD0000     F                      CALL   ?C?mv4_null2bc
              ; SOURCE LINE # 36 
0008 72195002                          BRES   05002H,#004H
              ; SOURCE LINE # 37 
000C 72185003                          BSET   05003H,#004H
              ; SOURCE LINE # 38 
0010 72195004                          BRES   05004H,#004H
              ; SOURCE LINE # 40 
0014 725F5234                          CLR    05234H
              ; SOURCE LINE # 42 
0018 725F5232                          CLR    05232H
              ; SOURCE LINE # 43 
001C 725F5233                          CLR    05233H
              ; SOURCE LINE # 45 
0020 AE0000     F                      LDW    X,#BaudRate
0023 CD0000     F                      CALL   ?C?mv4_ix2bc
0026 A604                              LD     A,#004H
0028 CD0000     F                      CALL   ?C?sll328
002B CD0000     F DNF                  CALL   ?C?mv4_bc2sk
002E CD0000     F DNF            M(07)  CALL  ?C?mv4_pg2bc
0031         ?DATASTART_0004:
0031 00                             M  DB     000H
0032 F4                             M  DB     0F4H
0033 24                             M  DB     024H
0034 00                             M  DB     000H
0035         ?DATAEND_0004:
0035 CD0000     F DNF                  CALL   ?C?divu3232
0038 4F                                CLR    A
0039 CD0000     F                      CALL   ?C?mv4_bc2isa
              ; SOURCE LINE # 46 
003C AE0000     F                      LDW    X,#BaudRate
003F CD0000     F                      CALL   ?C?mv4_ix2bc
0042 A604                              LD     A,#004H
0044 CD0000     F                      CALL   ?C?sll328
0047 CD0000     F DNF                  CALL   ?C?mv4_bc2sk
004A CD0000     F DNF            M(07)  CALL  ?C?mv4_pg2bc
004D         ?DATASTART_0005:
004D 5F                             M  DB     05FH
004E 5E                             M  DB     05EH
004F 10                             M  DB     010H
0050 00                             M  DB     000H
0051         ?DATAEND_0005:
0051 CD0000     F DNF                  CALL   ?C?divu3232
0054 A604       F                      LD     A,#004H
0056 CD0000     F                      CALL   ?C?mv4_bc2isa
              ; SOURCE LINE # 48 
0059 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
005C         ?DATASTART_0006:
005C 64                             M  DB     064H
005D         ?DATAEND_0006:
005D 1E0B       F                      LDW    X,(00BH,SP)   ; [ BaudRate_brr2 + 02H ]
005F 89                                PUSHW  X
0060 1E0B       F                      LDW    X,(00BH,SP)   ; [ BaudRate_brr2 ]
0062 89                                PUSHW  X
0063 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0066         ?DATASTART_0007:
0066 64                             M  DB     064H
0067         ?DATAEND_0007:
0067 96           DNF                  LDW    X,SP
0068 1C000D     F                      ADDW   X,#0000DH
006B CD0000     F DNF                  CALL   ?C?muluix32
006E CD0000     F DNF                  CALL   ?C?sub3232
0071 A604                              LD     A,#004H
0073 CD0000     F                      CALL   ?C?sll328
0076 CD0000     F DNF                  CALL   ?C?divu3232
0079 B606       F                      LD     A,?CL
007B A40F                              AND    A,#00FH
007D CA5233                            OR     A,05233H
0080 C75233                            LD     05233H,A
              ; SOURCE LINE # 50 
0083 4F                                CLR    A
0084 CD0000     F DNF                  CALL   ?C?mv4_isa2bc
0087 A604                              LD     A,#004H
0089 CD0000     F                      CALL   ?C?srl328
008C B606       F                      LD     A,?CL
008E A4F0                              AND    A,#0F0H
0090 CA5233                            OR     A,05233H
0093 C75233                            LD     05233H,A
              ; SOURCE LINE # 52 
0096 C65232                            LD     A,05232H
0099 1A04       F                      OR     A,(004H,SP)   ; [ BaudRate_brr1 + 03H ]
009B C75232                            LD     05232H,A
              ; SOURCE LINE # 54 
009E 35245235                          MOV    05235H,#024H
              ; SOURCE LINE # 55 
00A2 725F5236                          CLR    05236H
              ; SOURCE LINE # 56 
00A6 725F5237                          CLR    05237H
              ; SOURCE LINE # 57 
00AA 725F5238                          CLR    05238H
              ; SOURCE LINE # 58 
00AE 725F5239                          CLR    05239H
              ; SOURCE LINE # 59 
00B2 725F523A                          CLR    0523AH
              ; SOURCE LINE # 60 
00B6 5B08                              ADD    SP,#008H
00B8 81                                RET    
              ; BaudRate_brr1 unsigned long  (size=4-Alg). Automatic variable  in AUTO
              ; BaudRate_brr2 unsigned long  (size=4-Alg). Automatic variable  in AUTO

              ; FUNCTION ?UART_Config (END)

              ; FUNCTION ?kline_transmit (BEGIN)
              ; Register-parameter lp_data (XW) is relocated (auto)
              ; Register-parameter lp_len (A) is relocated (auto)
              ; SOURCE LINE # 63 
0000 89                                PUSHW  X
0001 88                                PUSH   A
0002 88                                PUSH   A
              ; SOURCE LINE # 67 
0003 35085235                          MOV    05235H,#008H
              ; SOURCE LINE # 68 
0007 0F01       F                      CLR    (001H,SP)   ; [ tr_i ]
0009         ?FOR_0001:
0009 7B01       F                      LD     A,(001H,SP)   ; [ tr_i ]
000B 1102       F                      CP     A,(002H,SP)   ; [ lp_len ]
000D 2419                              JRUGE  ?NXT_0005
              ; SOURCE LINE # 70 
000F 1E03       F                      LDW    X,(003H,SP)   ; [ lp_data ]
0011 BF02       F                      LDW    ?BH.w,X
0013 5F                                CLRW   X
0014 97                                LD     XL,A
0015 92D600     F                      LD     A,([?BH.w],X)
0018 C75231                            LD     05231H,A
001B         ?WHILE_0003:
              ; SOURCE LINE # 71 
001B AE0080                            LDW    X,#00080H
001E CD0000     F                      CALL   ?UART1_GetFlagStatus
0021 5D                                TNZW   X
              ; SOURCE LINE # 72 
0022 27F7                              JREQ   ?WHILE_0003
              ; SOURCE LINE # 68 
0024 0C01       F                      INC    (001H,SP)   ; [ tr_i ]
0026 20E1                              JRA    ?FOR_0001
0028         ?NXT_0005:
              ; SOURCE LINE # 76 
0028 7B02       F                      LD     A,(002H,SP)   ; [ lp_len ]
002A 1E03       F                      LDW    X,(003H,SP)   ; [ lp_data ]
002C CD0000     F                      CALL   ?kline_checksum
002F C75231                            LD     05231H,A
0032         ?WHILE_0004:
              ; SOURCE LINE # 77 
0032 AE0080                            LDW    X,#00080H
0035 CD0000     F                      CALL   ?UART1_GetFlagStatus
0038 5D                                TNZW   X
              ; SOURCE LINE # 78 
0039 27F7                              JREQ   ?WHILE_0004
003B         ?WHILE_0005:
              ; SOURCE LINE # 81 
003B AE0040                            LDW    X,#00040H
003E CD0000     F                      CALL   ?UART1_GetFlagStatus
0041 5D                                TNZW   X
              ; SOURCE LINE # 82 
0042 27F7                              JREQ   ?WHILE_0005
              ; SOURCE LINE # 85 
0044 A624                              LD     A,#024H
0046 CA5235                            OR     A,05235H
0049 C75235                            LD     05235H,A
              ; SOURCE LINE # 86 
004C 5B04                              ADD    SP,#004H
004E 81                                RET    
              ; lp_data      pointer to (unsigned char   in )(size=2).  parameter in AUTO
              ; lp_len       unsigned char  (size=1).  parameter in AUTO
              ; tr_i         unsigned char  (size=1). Automatic variable  in AUTO

              ; FUNCTION ?kline_transmit (END)

              ; FUNCTION ?uart_process_data (BEGIN)
              ; Register-parameter rec_length (A) is relocated (auto)
              ; Register XW is assigned to parameter BuffPointer
              ; SOURCE LINE # 103 
0000 88                                PUSH   A
              ; SOURCE LINE # 107 
0001 4B00                              PUSH   #000H
0003         ?FOR_0003:
0003 7B01       F                      LD     A,(001H,SP)   ; [ iLoop ]
0005 1102       F                      CP     A,(002H,SP)   ; [ rec_length ]
0007 2416                              JRUGE  ?NXT_0012
              ; SOURCE LINE # 109 
0009 BF02       F                      LDW    ?BH.w,X
000B 905F                              CLRW   Y
000D 9097                              LD     YL,A
000F 91D600     F                      LD     A,([?BH.w],Y)
0012 88                                PUSH   A
0013 7B02       F                      LD     A,(002H,SP)   ; [ iLoop ]
0015 9097                              LD     YL,A
0017 84                                POP    A
0018 90E711     F                      LD     (kline_rx_data + 00H,Y),A
              ; SOURCE LINE # 107 
001B 0C01       F                      INC    (001H,SP)   ; [ iLoop ]
001D 20E4                              JRA    ?FOR_0003
001F         ?NXT_0012:
              ; SOURCE LINE # 112 
001F 35010000   F                      MOV    kline_receive_complete_flag,#001H
              ; SOURCE LINE # 113 
0023 85                                POPW   X
0024 81                                RET    
              ; BuffPointer  pointer to (unsigned char   in )(size=2). Register parameter(XW) in PAGE0
              ; rec_length   unsigned char  (size=1).  parameter in AUTO
              ; iLoop        unsigned char  (size=1). Automatic variable  in AUTO

              ; FUNCTION ?uart_process_data (END)

              ; FUNCTION ?kline_checksum (BEGIN)
              ; Register-parameter len (A) is relocated (auto)
              ; Register XW is assigned to parameter p_data
              ; SOURCE LINE # 127 
0000 88                                PUSH   A
0001 89                                PUSHW  X
              ; SOURCE LINE # 130 
0002 0F02       F                      CLR    (002H,SP)   ; [ checksum ]
              ; SOURCE LINE # 132 
0004 0F01       F                      CLR    (001H,SP)   ; [ tr_i ]
0006         ?FOR_0005:
0006 7B01       F                      LD     A,(001H,SP)   ; [ tr_i ]
0008 1103       F                      CP     A,(003H,SP)   ; [ len ]
000A 2411                              JRUGE  ?NXT_0016
              ; SOURCE LINE # 134 
000C BF02       F                      LDW    ?BH.w,X
000E 905F                              CLRW   Y
0010 9097                              LD     YL,A
0012 7B02       F                      LD     A,(002H,SP)   ; [ checksum ]
0014 91DB00     F                      ADD    A,([?BH.w],Y)
0017 6B02       F                      LD     (002H,SP),A   ; [ checksum ]
              ; SOURCE LINE # 132 
0019 0C01       F                      INC    (001H,SP)   ; [ tr_i ]
001B 20E9                              JRA    ?FOR_0005
001D         ?NXT_0016:
              ; SOURCE LINE # 137 
001D 7B02       F                      LD     A,(002H,SP)   ; [ checksum ]
              ; SOURCE LINE # 138 
001F 5B03                              ADD    SP,#003H
0021 81                                RET    
              ; p_data       pointer to (unsigned char   in )(size=2). Register parameter(XW) in PAGE0
              ; len          unsigned char  (size=1).  parameter in AUTO
              ; tr_i         unsigned char  (size=1). Automatic variable  in AUTO
              ; checksum     unsigned char  (size=1). Automatic variable  in AUTO

              ; FUNCTION ?kline_checksum (END)

              ; FUNCTION ?UART1_TX_IRQHandler (BEGIN)
              ; SOURCE LINE # 155 
0000 A60E                              LD     A,#00EH
0002 C55230                            BCP    A,05230H
0005 2706                              JREQ   ?NXT_0021
              ; SOURCE LINE # 157 
0007 C65230                            LD     A,05230H
              ; SOURCE LINE # 158 
000A C65231                            LD     A,05231H
000D         ?NXT_0021:
              ; SOURCE LINE # 160 
000D 725F5230                          CLR    05230H
              ; SOURCE LINE # 161 
0011 80                                IRET   

              ; FUNCTION ?UART1_TX_IRQHandler (END)

              ; FUNCTION ?UART1_RX_IRQHandler (BEGIN)
              ; SOURCE LINE # 176 
0000 8A                                PUSH   CC
0001 84                                POP    A
0002 A4BF                              AND    A,#0BFH
0004 88                                PUSH   A
0005 86                                POP    CC
0006 BE03       F                      LDW    X,?CH.w
0008 89                                PUSHW  X
0009 BE02       F                      LDW    X,?BH.w
000B 89                                PUSHW  X
              ; SOURCE LINE # 178 
000C A60E                              LD     A,#00EH
000E C55230                            BCP    A,05230H
0011 2611                              JRNE   ?ELSE_0004
              ; SOURCE LINE # 180 
0013 5552310000 F                      MOV    uart_recv_data,05231H
              ; SOURCE LINE # 181 
0018 B600       F                      LD     A,Tester_Present
001A 4A                                DEC    A
001B 260D                              JRNE   ?NXT_0028
              ; SOURCE LINE # 183 
001D B600       F                      LD     A,uart_recv_data
001F CD0000     F                      CALL   ?kline_receive_validate_message2
0022 2006                              JRA    ?NXT_0028
0024         ?ELSE_0004:
              ; SOURCE LINE # 189 
0024 C65230                            LD     A,05230H
              ; SOURCE LINE # 191 
0027 C65231                            LD     A,05231H
002A         ?NXT_0028:
              ; SOURCE LINE # 195 
002A 725F5230                          CLR    05230H
              ; SOURCE LINE # 196 
002E 85                                POPW   X
002F BF02       F                      LDW    ?BH.w,X
0031 85                                POPW   X
0032 BF03       F                      LDW    ?CH.w,X
0034 80                                IRET   

              ; FUNCTION ?UART1_RX_IRQHandler (END)

RCSTM8 COMPILER V2.42.12.083


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    406    ----
   CONSTANT SIZE    =     12    ----
   DATA SIZE        =   ----    ----
   PAGE0 SIZE       =     47    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

RCSTM8 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
