RCSTM8 COMPILER V2.42.12.083,  STM8S_GPIO         05/19/25  15:34:41

QCW(0x00963FA0)

RCSTM8 COMPILER V2.42.12.083, COMPILATION OF MODULE STM8S_GPIO
OBJECT MODULE PLACED IN C:\Users\sravi\Downloads\E1M2_0036\E1M2_0036\main_app\bin\stm8s_gpio.obj
COMPILER INVOKED BY: QUIET GENERATEDEPFILE CODE DB OJ(C:\Users\sravi\Downloads\E1M2_0036\E1M2_0036\main_app\bin\stm8s_gpio.obj) PR(C:\Users\sravi\Downloads\E1M2_0036\E1M2_0036\main_app\lst\stm8s_gpio.lst) PIN(C:\Raisonance\Ride\Inc;C:\Raisonance\Ride\Inc\ST7;C:\Raisonance\Ride\Inc\STM8;C:\Users\sravi\Downloads\E1M2_0036\E1M2_0036\main_app\inc) STM8(SMALL) O(3,SIZE) NOINITSTATICVAR SMALLOBJECT ET(INT) 

stmt level    source
   1          /* Includes ------------------------------------------------------------------*/
   2          #include "stm8s_gpio.h"
   3          
   4          /**
   5            * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
   6            * @param  GPIOx: Select the GPIO peripheral number (x = A to I).
   7            * @retval None
   8            */
   9          void GPIO_DeInit(GPIO_TypeDef* GPIOx)
  10          {
  11   1          GPIOx->ODR = GPIO_ODR_RESET_VALUE; /* Reset Output Data Register */
  12   1          GPIOx->DDR = GPIO_DDR_RESET_VALUE; /* Reset Data Direction Register */
  13   1          GPIOx->CR1 = GPIO_CR1_RESET_VALUE; /* Reset Control Register 1 */
  14   1          GPIOx->CR2 = GPIO_CR2_RESET_VALUE; /* Reset Control Register 2 */
  15   1      }
  16          
  17          /**
  18            * @brief  Initializes the GPIOx according to the specified parameters.
  19            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
  20            * @param  GPIO_Pin : This parameter contains the pin number, it can be any value
  21            *         of the @ref GPIO_Pin_TypeDef enumeration.
  22            * @param  GPIO_Mode : This parameter can be a value of the
  23            *         @Ref GPIO_Mode_TypeDef enumeration.
  24            * @retval None
  25            */
  26          
  27          void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin, GPIO_Mode_TypeDef GPIO_Mode)
  28          {
  29   1          /*----------------------*/
  30   1          /* Check the parameters */
  31   1          /*----------------------*/
  32   1      
  33   1          assert_param(IS_GPIO_MODE_OK(GPIO_Mode));
  34   1          assert_param(IS_GPIO_PIN_OK(GPIO_Pin));
  35   1          
  36   1        /* Reset corresponding bit to GPIO_Pin in CR2 register */
  37   1        GPIOx->CR2 &= (uint8_t)(~(GPIO_Pin));
  38   1      
  39   1          /*-----------------------------*/
  40   1          /* Input/Output mode selection */
  41   1          /*-----------------------------*/
  42   1      
  43   1          if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x80) != (uint8_t)0x00) /* Output mode */
  44   1          {
  45   2              if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x10) != (uint8_t)0x00) /* High level */
  46   2              {
  47   3                  GPIOx->ODR |= (uint8_t)GPIO_Pin;
  48   3              } 
  49   2              else /* Low level */
  50   2              {
  51   3                  GPIOx->ODR &= (uint8_t)(~(GPIO_Pin));
  52   3              }
  53   2              /* Set Output mode */
  54   2              GPIOx->DDR |= (uint8_t)GPIO_Pin;
  55   2          } 
  56   1          else /* Input mode */
  57   1          {
  58   2              /* Set Input mode */
  59   2              GPIOx->DDR &= (uint8_t)(~(GPIO_Pin));
  60   2          }
  61   1      
  62   1          /*------------------------------------------------------------------------*/
  63   1          /* Pull-Up/Float (Input) or Push-Pull/Open-Drain (Output) modes selection */
  64   1          /*------------------------------------------------------------------------*/
  65   1      
  66   1          if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x40) != (uint8_t)0x00) /* Pull-Up or Push-Pull */
  67   1          {
  68   2              GPIOx->CR1 |= (uint8_t)GPIO_Pin;
  69   2          } 
  70   1          else /* Float or Open-Drain */
  71   1          {
  72   2              GPIOx->CR1 &= (uint8_t)(~(GPIO_Pin));
  73   2          }
  74   1      
  75   1          /*-----------------------------------------------------*/
  76   1          /* Interrupt (Input) or Slope (Output) modes selection */
  77   1          /*-----------------------------------------------------*/
  78   1      
  79   1          if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x20) != (uint8_t)0x00) /* Interrupt or Slow slope */
  80   1          {
  81   2              GPIOx->CR2 |= (uint8_t)GPIO_Pin;
  82   2          } 
  83   1          else /* No external interrupt or No slope control */
  84   1          {
  85   2              GPIOx->CR2 &= (uint8_t)(~(GPIO_Pin));
  86   2          }
  87   1      }
  88          
  89          /**
  90            * @brief  Writes data to the specified GPIO data port.
  91            * @note   The port must be configured in output mode.
  92            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
  93            * @param  GPIO_PortVal : Specifies the value to be written to the port output
  94            *         data register.
  95            * @retval None
  96            */
  97          void GPIO_Write(GPIO_TypeDef* GPIOx, uint8_t PortVal)
  98          {
  99   1          GPIOx->ODR = PortVal;
 100   1      }
 101          
 102          /**
 103            * @brief  Writes high level to the specified GPIO pins.
 104            * @note   The port must be configured in output mode.  
 105            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
 106            * @param  PortPins : Specifies the pins to be turned high to the port output.
 107            *         data register.
 108            * @retval None
 109            */
 110          void GPIO_WriteHigh(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef PortPins)
 111          {
 112   1          GPIOx->ODR |= (uint8_t)PortPins;
 113   1      }
 114          
 115          /**
 116            * @brief  Writes low level to the specified GPIO pins.
 117            * @note   The port must be configured in output mode.  
 118            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
 119            * @param  PortPins : Specifies the pins to be turned low to the port output.
 120            *         data register.
 121            * @retval None
 122            */
 123          void GPIO_WriteLow(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef PortPins)
 124          {
 125   1          GPIOx->ODR &= (uint8_t)(~PortPins);
 126   1      }
 127          
 128          /**
 129            * @brief  Writes reverse level to the specified GPIO pins.
 130            * @note   The port must be configured in output mode.
 131            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
 132            * @param  PortPins : Specifies the pins to be reversed to the port output.
 133            *         data register.
 134            * @retval None
 135            */
 136          void GPIO_WriteReverse(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef PortPins)
 137          {
 138   1          GPIOx->ODR ^= (uint8_t)PortPins;
 139   1      }
 140          
 141          /**
 142            * @brief  Reads the specified GPIO output data port.
 143            * @note   The port must be configured in input mode.  
 144            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
 145            * @retval GPIO output data port value.
 146            */
 147          uint8_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
 148          {
 149   1          return ((uint8_t)GPIOx->ODR);
 150   1      }
 151          
 152          /**
 153            * @brief  Reads the specified GPIO input data port.
 154            * @note   The port must be configured in input mode.   
 155            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
 156            * @retval GPIO input data port value.
 157            */
 158          uint8_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
 159          {
 160   1          return ((uint8_t)GPIOx->IDR);
 161   1      }
 162          
 163          /**
 164            * @brief  Reads the specified GPIO input data pin.
 165            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
 166            * @param  GPIO_Pin : Specifies the pin number.
 167            * @retval BitStatus : GPIO input pin status.
 168            */
 169          BitStatus GPIO_ReadInputPin(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin)
 170          {
 171   1          return ((BitStatus)(GPIOx->IDR & (uint8_t)GPIO_Pin));
 172   1      }
 173          
 174          /**
 175            * @brief  Configures the external pull-up on GPIOx pins.
 176            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
 177            * @param  GPIO_Pin : Specifies the pin number
 178            * @param  NewState : The new state of the pull up pin.
 179            * @retval None
 180            */
 181          void GPIO_ExternalPullUpConfig(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin, FunctionalState NewState)
 182          {
 183   1          /* Check the parameters */
 184   1          assert_param(IS_GPIO_PIN_OK(GPIO_Pin));
 185   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 186   1      
 187   1          if (NewState != DISABLE) /* External Pull-Up Set*/
 188   1          {
 189   2              GPIOx->CR1 |= (uint8_t)GPIO_Pin;
 190   2          } else /* External Pull-Up Reset*/
 191   1          {
 192   2              GPIOx->CR1 &= (uint8_t)(~(GPIO_Pin));
 193   2          }
 194   1      }
 195          
RCSTM8 COMPILER V2.42.12.083
ASSEMBLY LISTING OF GENERATED OBJECT CODE

              ; FUNCTION ?GPIO_DeInit (BEGIN)
              ; Register XW is assigned to parameter GPIOx
              ; SOURCE LINE # 11 
0000 7F                                CLR    (X)
              ; SOURCE LINE # 12 
0001 6F02                              CLR    (002H,X)
              ; SOURCE LINE # 13 
0003 6F03                              CLR    (003H,X)
              ; SOURCE LINE # 14 
0005 6F04                              CLR    (004H,X)
              ; SOURCE LINE # 15 
0007 81                                RET    
              ; GPIOx        pointer to ( GPIO_struct-struct (size=5) in )(size=2). Register parameter(XW) in PAGE0

              ; FUNCTION ?GPIO_DeInit (END)

              ; FUNCTION ?GPIO_Init (BEGIN)
              ; Register-parameter GPIOx (XW) is relocated (auto)
              ; SOURCE LINE # 27 
0000 89                                PUSHW  X
              ; SOURCE LINE # 33 
0001 1E07       F                      LDW    X,(007H,SP)   ; [ GPIO_Mode ]
0003 2743                              JREQ   ?NXT_0006
0005 A30040                            CPW    X,#00040H
0008 273E                              JREQ   ?NXT_0006
000A A30020                            CPW    X,#00020H
000D 2739                              JREQ   ?NXT_0006
000F A30060                            CPW    X,#00060H
0012 2734                              JREQ   ?NXT_0006
0014 A300A0                            CPW    X,#000A0H
0017 272F                              JREQ   ?NXT_0006
0019 A300E0                            CPW    X,#000E0H
001C 272A                              JREQ   ?NXT_0006
001E A30080                            CPW    X,#00080H
0021 2725                              JREQ   ?NXT_0006
0023 A300C0                            CPW    X,#000C0H
0026 2720                              JREQ   ?NXT_0006
0028 A300B0                            CPW    X,#000B0H
002B 271B                              JREQ   ?NXT_0006
002D A300F0                            CPW    X,#000F0H
0030 2716                              JREQ   ?NXT_0006
0032 A30090                            CPW    X,#00090H
0035 2711                              JREQ   ?NXT_0006
0037 A300D0                            CPW    X,#000D0H
003A 270C                              JREQ   ?NXT_0006
003C CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
003F         ?DATASTART_0002:
003F 21                             M  DB     021H
0040         ?DATAEND_0002:
0040 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_GPIO?BASE)
0043 CD0000     F                      CALL   ?assert_failed
0046 5B04                              ADD    SP,#004H
0048         ?NXT_0006:
              ; SOURCE LINE # 34 
0048 1E05       F                      LDW    X,(005H,SP)   ; [ GPIO_Pin ]
004A 260C                              JRNE   ?NXT_0007
004C CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
004F         ?DATASTART_0003:
004F 22                             M  DB     022H
0050         ?DATAEND_0003:
0050 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_GPIO?BASE)
0053 CD0000     F                      CALL   ?assert_failed
0056 5B04                              ADD    SP,#004H
0058         ?NXT_0007:
              ; SOURCE LINE # 37 
0058 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
005A 1C0004                            ADDW   X,#00004H
005D 7B06       F                      LD     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
005F 43                                CPL    A
0060 F4                                AND    A,(X)
0061 F7                                LD     (X),A
              ; SOURCE LINE # 43 
0062 7B08       F                      LD     A,(008H,SP)   ; [ GPIO_Mode + 01H ]
0064 A580                              BCP    A,#080H
0066 271B                              JREQ   ?ELSE_0008
              ; SOURCE LINE # 45 
0068 A510                              BCP    A,#010H
006A 2707                              JREQ   ?ELSE_0009
              ; SOURCE LINE # 47 
006C 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
006E F6                                LD     A,(X)
006F 1A06       F                      OR     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
0071 2006                              JRA    ?NXT_0009
0073         ?ELSE_0009:
              ; SOURCE LINE # 51 
0073 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
0075 7B06       F                      LD     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
0077 43                                CPL    A
0078 F4                                AND    A,(X)
0079         ?NXT_0009:
0079 F7                                LD     (X),A
              ; SOURCE LINE # 54 
007A 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
007C 5C                                INCW   X
007D 5C                                INCW   X
007E F6                                LD     A,(X)
007F 1A06       F                      OR     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
0081 2008                              JRA    ?NXT_0008
0083         ?ELSE_0008:
              ; SOURCE LINE # 59 
0083 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
0085 5C                                INCW   X
0086 5C                                INCW   X
0087 7B06       F                      LD     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
0089 43                                CPL    A
008A F4                                AND    A,(X)
008B         ?NXT_0008:
008B F7                                LD     (X),A
              ; SOURCE LINE # 66 
008C 7B08       F                      LD     A,(008H,SP)   ; [ GPIO_Mode + 01H ]
008E A540                              BCP    A,#040H
0090 270A                              JREQ   ?ELSE_0010
              ; SOURCE LINE # 68 
0092 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
0094 1C0003                            ADDW   X,#00003H
0097 F6                                LD     A,(X)
0098 1A06       F                      OR     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
009A 2009                              JRA    ?NXT_0010
009C         ?ELSE_0010:
              ; SOURCE LINE # 72 
009C 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
009E 1C0003                            ADDW   X,#00003H
00A1 7B06       F                      LD     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
00A3 43                                CPL    A
00A4 F4                                AND    A,(X)
00A5         ?NXT_0010:
00A5 F7                                LD     (X),A
              ; SOURCE LINE # 79 
00A6 7B08       F                      LD     A,(008H,SP)   ; [ GPIO_Mode + 01H ]
00A8 A520                              BCP    A,#020H
00AA 270A                              JREQ   ?ELSE_0011
              ; SOURCE LINE # 81 
00AC 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
00AE 1C0004                            ADDW   X,#00004H
00B1 F6                                LD     A,(X)
00B2 1A06       F                      OR     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
00B4 2009                              JRA    ?EPILOG_0001
00B6         ?ELSE_0011:
              ; SOURCE LINE # 85 
00B6 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
00B8 1C0004                            ADDW   X,#00004H
00BB 7B06       F                      LD     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
00BD 43                                CPL    A
00BE F4                                AND    A,(X)
00BF         ?EPILOG_0001:
00BF F7                                LD     (X),A
              ; SOURCE LINE # 87 
00C0 85                                POPW   X
00C1 81                                RET    
              ; GPIOx        pointer to ( GPIO_struct-struct (size=5) in )(size=2).  parameter in AUTO
              ; GPIO_Pin     (size=2).  parameter in AUTO
              ; GPIO_Mode    (size=2).  parameter in AUTO

              ; FUNCTION ?GPIO_Init (END)

              ; FUNCTION ?GPIO_Write (BEGIN)
              ; Register-parameter PortVal (A) is relocated (auto)
              ; Register XW is assigned to parameter GPIOx
              ; SOURCE LINE # 99 
0000 F7                                LD     (X),A
              ; SOURCE LINE # 100 
0001 81                                RET    
              ; GPIOx        pointer to ( GPIO_struct-struct (size=5) in )(size=2). Register parameter(XW) in PAGE0
              ; PortVal      unsigned char  (size=1).  parameter in AUTO

              ; FUNCTION ?GPIO_Write (END)

              ; FUNCTION ?GPIO_WriteHigh (BEGIN)
              ; Register XW is assigned to parameter GPIOx
              ; SOURCE LINE # 112 
0000 F6                                LD     A,(X)
0001 1A04       F                      OR     A,(004H,SP)   ; [ PortPins + 01H ]
0003 F7                                LD     (X),A
              ; SOURCE LINE # 113 
0004 81                                RET    
              ; GPIOx        pointer to ( GPIO_struct-struct (size=5) in )(size=2). Register parameter(XW) in PAGE0
              ; PortPins     (size=2).  parameter in AUTO

              ; FUNCTION ?GPIO_WriteHigh (END)

              ; FUNCTION ?GPIO_WriteLow (BEGIN)
              ; Register-parameter GPIOx (XW) is relocated (auto)
              ; SOURCE LINE # 125 
0000 7B04       F                      LD     A,(004H,SP)   ; [ PortPins + 01H ]
0002 43                                CPL    A
0003 F4                                AND    A,(X)
0004 F7                                LD     (X),A
              ; SOURCE LINE # 126 
0005 81                                RET    
              ; GPIOx        pointer to ( GPIO_struct-struct (size=5) in )(size=2).  parameter in AUTO
              ; PortPins     (size=2).  parameter in AUTO

              ; FUNCTION ?GPIO_WriteLow (END)

              ; FUNCTION ?GPIO_WriteReverse (BEGIN)
              ; Register XW is assigned to parameter GPIOx
              ; SOURCE LINE # 138 
0000 F6                                LD     A,(X)
0001 1804       F                      XOR    A,(004H,SP)   ; [ PortPins + 01H ]
0003 F7                                LD     (X),A
              ; SOURCE LINE # 139 
0004 81                                RET    
              ; GPIOx        pointer to ( GPIO_struct-struct (size=5) in )(size=2). Register parameter(XW) in PAGE0
              ; PortPins     (size=2).  parameter in AUTO

              ; FUNCTION ?GPIO_WriteReverse (END)

              ; FUNCTION ?GPIO_ReadOutputData (BEGIN)
              ; Register XW is assigned to parameter GPIOx
              ; SOURCE LINE # 149 
0000 F6                                LD     A,(X)
              ; SOURCE LINE # 150 
0001 81                                RET    
              ; GPIOx        pointer to ( GPIO_struct-struct (size=5) in )(size=2). Register parameter(XW) in PAGE0

              ; FUNCTION ?GPIO_ReadOutputData (END)

              ; FUNCTION ?GPIO_ReadInputData (BEGIN)
              ; Register XW is assigned to parameter GPIOx
              ; SOURCE LINE # 160 
0000 E601                              LD     A,(001H,X)
              ; SOURCE LINE # 161 
0002 81                                RET    
              ; GPIOx        pointer to ( GPIO_struct-struct (size=5) in )(size=2). Register parameter(XW) in PAGE0

              ; FUNCTION ?GPIO_ReadInputData (END)

              ; FUNCTION ?GPIO_ReadInputPin (BEGIN)
              ; Register-parameter GPIOx (XW) is relocated (auto)
              ; SOURCE LINE # 171 
0000 7B04       F                      LD     A,(004H,SP)   ; [ GPIO_Pin + 01H ]
0002 E401                              AND    A,(001H,X)
0004 5F                                CLRW   X
0005 97                                LD     XL,A
              ; SOURCE LINE # 172 
0006 81                                RET    
              ; GPIOx        pointer to ( GPIO_struct-struct (size=5) in )(size=2).  parameter in AUTO
              ; GPIO_Pin     (size=2).  parameter in AUTO

              ; FUNCTION ?GPIO_ReadInputPin (END)

              ; FUNCTION ?GPIO_ExternalPullUpConfig (BEGIN)
              ; Register-parameter GPIOx (XW) is relocated (auto)
              ; SOURCE LINE # 181 
0000 89                                PUSHW  X
              ; SOURCE LINE # 184 
0001 1E05       F                      LDW    X,(005H,SP)   ; [ GPIO_Pin ]
0003 260C                              JRNE   ?NXT_0015
0005 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0008         ?DATASTART_0006:
0008 B8                             M  DB     0B8H
0009         ?DATAEND_0006:
0009 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_GPIO?BASE)
000C CD0000     F                      CALL   ?assert_failed
000F 5B04                              ADD    SP,#004H
0011         ?NXT_0015:
              ; SOURCE LINE # 185 
0011 1E07       F                      LDW    X,(007H,SP)   ; [ NewState ]
0013 270F                              JREQ   ?NXT_0016
0015 5A                                DECW   X
0016 270C                              JREQ   ?NXT_0016
0018 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
001B         ?DATASTART_0007:
001B B9                             M  DB     0B9H
001C         ?DATAEND_0007:
001C AE0000     F                      LDW    X,#HIGH(?STR?STM8S_GPIO?BASE)
001F CD0000     F                      CALL   ?assert_failed
0022 5B04                              ADD    SP,#004H
0024         ?NXT_0016:
              ; SOURCE LINE # 187 
0024 1E07       F                      LDW    X,(007H,SP)   ; [ NewState ]
0026 270A                              JREQ   ?ELSE_0017
              ; SOURCE LINE # 189 
0028 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
002A 1C0003                            ADDW   X,#00003H
002D F6                                LD     A,(X)
002E 1A06       F                      OR     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
0030 2009                              JRA    ?EPILOG_0009
0032         ?ELSE_0017:
              ; SOURCE LINE # 192 
0032 1E01       F                      LDW    X,(001H,SP)   ; [ GPIOx ]
0034 1C0003                            ADDW   X,#00003H
0037 7B06       F                      LD     A,(006H,SP)   ; [ GPIO_Pin + 01H ]
0039 43                                CPL    A
003A F4                                AND    A,(X)
003B         ?EPILOG_0009:
003B F7                                LD     (X),A
              ; SOURCE LINE # 194 
003C 85                                POPW   X
003D 81                                RET    
              ; GPIOx        pointer to ( GPIO_struct-struct (size=5) in )(size=2).  parameter in AUTO
              ; GPIO_Pin     (size=2).  parameter in AUTO
              ; NewState     (size=2).  parameter in AUTO

              ; FUNCTION ?GPIO_ExternalPullUpConfig (END)

RCSTM8 COMPILER V2.42.12.083


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    294    ----
   CONSTANT SIZE    =     71    ----
   DATA SIZE        =   ----    ----
   PAGE0 SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

RCSTM8 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
